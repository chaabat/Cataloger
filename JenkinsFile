pipeline {
    agent any
    
    tools {
        maven 'Maven'
        jdk 'JDK17'
    }
    
    environment {
        DOCKER_IMAGE = "cataloger-app"
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_PROJECT_KEY = "Cataloger"
        DOCKER_REGISTRY = "your-registry-url" // Add your Docker registry URL
        DOCKER_CREDENTIALS = 'docker-credentials-id' // Add your Docker credentials ID
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                sh '''
                    mvn clean verify \
                    -Dmaven.test.failure.ignore=false \
                    -Djacoco.destFile=target/jacoco.exec
                '''
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    jacoco(
                        execPattern: 'target/jacoco.exec',
                        classPattern: 'target/classes',
                        sourcePattern: 'src/main/java',
                        exclusionPattern: 'src/test*'
                    )
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                mvn sonar:sonar \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.java.binaries=target/classes \
                                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                                -Dsonar.exclusions=**/dto/**,**/entity/**
                            """
                        }
                    }
                }
                
                stage('OWASP Dependency Check') {
                    steps {
                        sh 'mvn org.owasp:dependency-check-maven:check'
                    }
                    post {
                        always {
                            dependencyCheckPublisher pattern: 'target/dependency-check-report.xml'
                        }
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                script {
                    def dockerImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "--build-arg JAR_FILE=target/*.jar .")
                    
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} ${DOCKER_REGISTRY}"
                        dockerImage.push()
                        
                        if (env.BRANCH_NAME == 'main') {
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                script {
                    def deployScript = env.BRANCH_NAME == 'main' ? 'docker-compose.yml' : 'docker-compose.staging.yml'
                    
                    withCredentials([file(credentialsId: 'docker-compose-config', variable: 'DOCKER_COMPOSE_CONFIG')]) {
                        sh """
                            docker-compose -f ${deployScript} down || true
                            docker-compose -f ${deployScript} pull
                            docker-compose -f ${deployScript} up -d
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            sh 'docker system prune -f'
        }
        success {
            emailext (
                subject: "✅ Pipeline Successful: ${currentBuild.fullDisplayName}",
                body: """
                    Build succeeded!
                    
                    Build URL: ${BUILD_URL}
                    Project: ${env.JOB_NAME}
                    Branch: ${env.BRANCH_NAME}
                    
                    Changes:
                    ${currentBuild.changeSets.collect { it.items }.flatten().collect { "- ${it.msg}" }.join('\n')}
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        failure {
            emailext (
                subject: "❌ Pipeline Failed: ${currentBuild.fullDisplayName}",
                body: """
                    Build failed!
                    
                    Build URL: ${BUILD_URL}
                    Project: ${env.JOB_NAME}
                    Branch: ${env.BRANCH_NAME}
                    
                    Console Output:
                    ${currentBuild.rawBuild.getLog(100).join('\n')}
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}